from dynsys_framework.functions.tensor2.common import *

import numpy as np
# import cupy as cp
xp = np


def gaussian_rbf(eps, stream_wise=False):
    _add = cadd
    if stream_wise:
        _add = sadd

    def dyn(centers, inputs):
        """
        Radial basis function with euclidean distance.

        :param centers: shortened weight, shape = (input_vector_dim, output_vector_dim, sink_stream_size)
        :param inputs: stream, shape = (1, input_vector_dim, source_stream_size)
        :return: stream, shape = (1, output_vector_dim, sink_stream_size)
        """
        dist = xp.abs(xp.sum(xp.square(_add(-centers, inputs)), axis=0, keepdims=True))
        return xp.exp(-eps * dist),

    return dyn


def gaussian_double_rbf(eps_input, eps_pivot, stream_wise=False):
    # FIXME: not tested in tensor2
    _add = cadd
    if stream_wise:
        _add = sadd

    def dyn(centers, pivots, inputs):
        """
        Radial basis function with euclidean distance of centers from the input and pivot.
        An input signal of dimension input_dimension generated by respective source stream is compared
        with center of respective source stream stream and output. Each source stream has its own pivot to which is
        the center of respective source stream compared.

        :param centers: shortened weight, shape = (input_vector_dim, output_vector_dim, sink_stream_size)
        :param pivots: stream, shape = (1, input_dimension, source_stream_size)
        :param inputs: stream, shape = (1, input_dimension, source_stream_size)
        :return: shape = (1, output_vector_dim, sink_stream_size)
        """
        dist_input = xp.abs(xp.sum(xp.square(_add(-centers, inputs)), axis=0, keepdims=True))
        dist_pivot = xp.abs(xp.sum(xp.square(_add(-centers, pivots)), axis=0, keepdims=True))
        return xp.exp(- eps_input * dist_input - eps_pivot * dist_pivot),

    return dyn